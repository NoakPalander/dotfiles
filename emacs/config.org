#+title: Config
#+author: Noak Palander
#+email: noak.palander@protonmail.com
#+property: header-args :tangle "config.el"

* Custom configuration for doom emacs
** Packages
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)

; Packages this configuration uses
(setq package-selected-packages '(go-mode
                                  erlang
                                  org-roam-ui
                                  org-roam
                                  julia-repl
                                  lsp-julia
                                  julia-mode
                                  cargo-mode
                                  cargo
                                  rust-mode
                                  minimap
                                  ligature
                                  undo-tree
                                  haskell-mode
                                  lsp-haskell
                                  clang-format+
                                  platformio-mode
                                  pyvenv
                                  page-break-lines
                                  json-mode
                                  dap-mode
                                  lsp-mode
                                  lsp-ui
                                  centaur-tabs
                                  ace-window
                                  dracula-theme
                                  visual-fill-column
                                  org-modern
                                  dashboard
                                  flycheck
                                  company
                                  helm-xref
                                  lsp-treemacs
                                  treemacs-all-the-icons
                                  helm-lsp
                                  python-mode
                                  cmake-project
                                  elixir-mode mix
                                  move-text))

; If these packages aren't loaded, install them
(when (cl-find-if-not #'package-installed-p package-selected-packages)
  (package-refresh-contents)
  (mapc #'package-install package-selected-packages))
#+end_src

** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :if (< (length command-line-args) 2)
  :ensure t
  :init
  (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))

  (setq dashboard-set-init-info nil
        dashboard-banner-logo-title "Welcome back to Emacs"
        dashboard-footer-messages '("alias vim = 'emacs'")
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-footer-icon (all-the-icons-octicon "dashboard"
                                                   :height 1.1
                                                   :v-adjust -0.05
                                                   :face 'font-lock-keyword-face)
        dashboard-items '((bookmarks . 5) (projects . 5))
        dashboard-center-content t
        dashboard-startup-banner "~/.emacs.d/icons/logo.png"
        dashboard-page-separator "\n\f\n"
        dashboard-set-navigator t
        dashboard-navigator-buttons `(((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
                                        "Github" "Browse github" (lambda (&rest _) (browse-url "github.com/NoakPalander")))

                                       (,(all-the-icons-octicon "gear" :height 1.1 :v-adjust 0.0) "Dotfiles" "Browse dotfiles"
                                        (lambda (&rest _) (browse-url "github.com/NoakPalander/dotfiles")))

                                       (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0) "Doom" "Doom emacs"
                                        (lambda (&rest _) (browse-url "https://github.com/doomemacs/doomemacs"))))))

  :config
  (dashboard-setup-startup-hook)
  (page-break-lines-mode))
#+end_src

** Miscellaneous
Some helper functions used
#+begin_src emacs-lisp
(setq default--transparency 92)
(set-frame-parameter (selected-frame) 'alpha default--transparency)
(add-to-list 'default-frame-alist `(alpha . ,default--transparency))

(defun enable-transparency (&optional _)
  (set-frame-parameter (selected-frame) 'alpha 92))

(defun disable-transparency (&optional _)
  (set-frame-parameter (selected-frame) 'alpha 100))

(defun toggle-transparency (&optional _)
  "Toggles the transparency between the default--transparency and full opacity."
  (interactive)
  (if (< (frame-parameter (selected-frame) 'alpha) 100)
      (disable-transparency)
    (enable-transparency)))
#+end_src

#+begin_src emacs-lisp
; Elixir run
(defun mix-run (&optional prefix use-umbrella-subprojects)
  "Run the mix escript.build command.
If PREFIX is non-nil, prompt for additional params.  See `mix--prompt`
IF USE-UMBRELLA-SUBPROJECTS is t, prompt for umbrells subproject."
  (interactive "P")
  (let ((project-root (if use-umbrella-subprojects (mix--umbrella-subproject-prompt) (mix--project-root))))
    (mix--start nil "App" project-root prefix)))
#+end_src

#+begin_src emacs-lisp
(defun cpp-cmake-compile (&optional _)
  (interactive)
  (cmake-command-run "--build" cmake-project-build-directory))
#+end_src

#+begin_src emacs-lisp
; Generates hooks for compiling running and formatting source code
(defmacro build-hooks (mode compile-target run-target format-target)
  `(list (add-hook ,mode (lambda () (local-set-key (kbd "C-c b") ,compile-target)))
    (add-hook ,mode (lambda () (local-set-key (kbd "C-c r") ,run-target)))
    (add-hook ,mode (lambda () (local-set-key (kbd "C-c g") ,format-target)))))

; Toggles the show-buffer or show-tabs modes
(defun toggle-show-groups ()
  (interactive)
  (if (equal t centaur-tabs--buffer-show-groups)
      (setq centaur-tabs--buffer-show-groups nil)
    (setq centaur-tabs--buffer-show-groups t)))

(defun toggle-show-docs ()
  (interactive)
  )

(defun centaur-tabs-buffer-groups ()
  (list
   (cond
    ((or (string-equal "*" (substring (buffer-name) 0 1))
         (memq major-mode '(magit-process-mode
                            magit-status-mode
                            magit-diff-mode
                            magit-log-mode
                            magit-file-mode
                            magit-blob-mode
                            magit-blame-mode)))
     "Emacs")
    ((derived-mode-p 'prog-mode)
     "Editing")
    ((derived-mode-p 'dired-mode)
     "Dired"))))

; Center org buffers
(defun center-org-buffers ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(defun code-block-color ()
  (set-face-attribute 'org-block nil :background
                      (color-darken-name
                       (face-attribute 'default :background) 3)))

; Creates a new temp file
(defun generate-buffer ()
  (interactive)
  (switch-to-buffer (make-temp-name "scratch")))

; Saves a file by sudo
(defun sudo-save ()
  (interactive)
  (if (not buffer-file-name)
      (write-file (concat "/sudo:root@localhost:" (ido-read-file-name "File:")))
    (write-file (concat "/su
do:root@localhost:" buffer-file-name))))

; Selects the current line
(defun select-current-line ()
    "Select the current line"
  (interactive)
  (end-of-line)
  (set-mark (line-beginning-position)))
#+end_src

Projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (setq projectile-track-known-projects-automatically nil))
#+end_src

Tabbing
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
#+end_src

** Ace window
#+begin_src emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
        aw-background nil
        aw-minibuffer-flag t)
  (ace-window-display-mode 1))
#+end_src

** Centaur tabs
#+begin_src emacs-lisp
; https://github.com/ema2159/centaur-tabs
(use-package centaur-tabs
  :ensure t
  :demand
  :config
  (setq centaur-tabs-style "alternate"
        centaur-tabs-height 32
        centaur-tabs-set-icons t
        centaur-tabs-set-bar 'under
        x-underline-at-descent-line t
        centaur-tabs-set-close-button nil
        centaur-tabs-show-new-tab-button nil
        centaur-tabs-cycle-scope 'tabs
        centaur-tabs-set-modified-marker t
        centaur-tabs-modified-marker "●")

  (set-face-background 'centaur-tabs-active-bar-face "#7AA2F7")
  (centaur-tabs-headline-match)
  (centaur-tabs-change-fonts "JetBrains Mono" 100)
  (centaur-tabs-group-by-projectile-project)
  (centaur-tabs-mode t))
#+end_src

** Font & Theme
#+begin_src emacs-lisp
(load-theme 'doom-tokyo-night t)

(if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (set-frame-font "JetBrains Mono"))))
  (set-frame-font "Jetbrains Mono"))

; Enable font ligatures
(ligature-set-ligatures '(c-mode haskell-mode elixir-mode rust-mode erlang-mode go-mode)
                        '("==" "===" "!==" "!="
                          "/=" "<-" "->"
                          "-->" "<--" "=>"
                          "==>" "<==" "++"
                          ">=" "<=" "<<" ">>" "<>" "|>"))
#+end_src

** Treemacs
#+begin_src emacs-lisp
(use-package treemacs-all-the-icons
  :after treemacs)
#+end_src

**  Minimap
#+begin_src emacs-lisp
(use-package minimap
  :config
  (setq minimap-window-location 'right))
#+end_src

** Company mode / LSP mode
#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :config
  (setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      company-idle-delay 0.0
      company-minimum-prefix-length 1
      lsp-idle-delay 0.1)

  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0)
  :after
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration))

#+end_src

* Keybindings
** Remove previous evil-keybinds
#+begin_src emacs-lisp
(define-key evil-insert-state-map (kbd "C-w") nil)
(define-key evil-replace-state-map (kbd "C-w") nil)
(define-key evil-motion-state-map (kbd "C-y") nil)
(define-key evil-normal-state-map (kbd "C-p") nil)
#+end_src

** Custom global keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "C-x C-r") 'replace-string)
(global-set-key (kbd "C-c j") 'flycheck-list-errors)
(global-set-key (kbd "C-x s") 'save-buffer)

; Resizes windows horizontally and vertically
(global-set-key (kbd "C-c C-<right>") 'enlarge-window-horizontally)
(global-set-key (kbd "C-c C-<left>") 'shrink-window-horizontally)
(global-set-key (kbd "C-c C-<up>") 'enlarge-window)
(global-set-key (kbd "C-c C-<down>") 'shrink-window)

(global-set-key (kbd "C-x t") 'rotate:main-horizontal)  ; Rotates layout to a stacked mode
(global-set-key (kbd "M-o") 'ace-window)                ; aw
(global-set-key (kbd "C-c n") 'generate-buffer)         ; new buffer
(global-set-key (kbd "C-w") 'clipboard-kill-region)     ; cut
(global-set-key (kbd "C-c x") 'clipboard-yank)          ; paste
(global-set-key (kbd "C-c v") 'treemacs)                ; start treemacs
(global-set-key (kbd "C-c l") 'select-current-line)     ; Selects the current line
(global-set-key (kbd "C-c a") 'read-only-mode)          ; Toggles read-only-mode
(global-set-key (kbd "C-+") 'toggle-input-method)       ; Toggle input method
#+end_src

** Centaur tabs
#+begin_src emacs-lisp
(global-set-key (kbd "M-s M-f") 'centaur-tabs--create-new-tab)         ; New tab
(global-set-key (kbd "M-s M-d") 'toggle-show-groups)                   ; Toggle tab/group view
(global-set-key (kbd "M-s M-<up>") 'centaur-tabs-forward-group)        ; Next group
(global-set-key (kbd "M-s M-<down>") 'centaur-tabs-backward-group)     ; Prev. group
(global-set-key (kbd "M-s M-<right>") 'centaur-tabs-forward-tab)       ; Next tab
(global-set-key (kbd "M-s M-<left>") 'centaur-tabs-backward-tab)       ; Prev tab
#+end_src

* Language configurations & modes
** LSP & LSP-ui mode
#+begin_src emacs-lisp
(use-package lsp-mode
  :commands lsp
  :ensure t
  :diminish lsp-mode)

(use-package lsp-ui
  :after lsp
  :ensure t
  :hook ((lsp-ui-mode . (lambda () (local-set-key (kbd "C-c d") 'lsp-ui-doc-hide)))
         (lsp-ui-mode . (lambda () (local-set-key (kbd "C-c s") 'lsp-ui-doc-show)))
         (lsp-ui-mode . (lambda () (flycheck-list-errors)))
         (lsp-ui-mode . lsp-mode))
  :custom
  (lsp-ui-doc-position 'bottom))


(use-package lsp-treemacs
  :after lsp
  :init
  (setq lsp-treemacs-symbols-position 'right))
#+end_src

** Ini-mode
#+begin_src emacs-lisp
(use-package ini-mode
  :ensure t
  :mode ("\\.ini\\'")
  :hook ((ini-mode . rainbow-mode)))
#+end_src

** Golang
#+begin_src emacs-lisp
(defun golang-run ()
  (interactive)
  (compile "go run *.go" t))

(defun golang-compile ()
  (interactive)
  (compile "go build" t))

(defun golang-format ()
  (interactive)
  (compile "go fmt" t))

(use-package go-mode
  :ensure
  :mode ("\\.go\\'")
  :hook ((go-mode . lsp-deferred)
         (go-mode . ligature-mode))
  :init
  (build-hooks 'go-mode-hook 'golang-compile 'golang-run 'golang-format))
#+end_src

** Elixir
Elixir package configs
#+begin_src emacs-lisp
(use-package elixir-mode
  :mode ("\\.ex\\'" "\\.exs\\'")
  :hook ((elixir-mode . lsp-deferred)
         (elixir-mode . (lambda () (setenv "LC_ALL" "en_US.UTF-8")))
         (elixir-mode . ligature-mode))
  :init
  (add-to-list 'exec-path "/usr/lib/elixir-ls/")
  (build-hooks 'elixir-mode-hook 'mix-compile 'mix-run 'elixir-format))
#+end_src

** Erlang
#+begin_src emacs-lisp
(use-package erlang-mode
  :mode ("\\.erl\\'")
  :hook (erlang-mode . lsp-deferred))
#+end_src

** Julia
#+begin_src emacs-lisp
(use-package lsp-julia
  :config
  (setq lsp-julia-default-environment "~/.julia/environments/v1.6"))

(use-package julia-mode
  :mode ("\\.jl\\'")
  :hook ((julia-mode . lsp-deferred)))
#+end_src

** Haskell
#+begin_src emacs-lisp
(use-package haskell-mode
  :mode ("\\.hs\\'")
  :hook ((haskell-mode . lsp-deferred)
         (haskell-literate-mode . lsp-deferred)
         (haskell-mode . ligature-mode))
  :init
  (build-hooks 'haskell-mode-hook 'haskell-compile nil nil))
#+end_src

** Org roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :init
  (setq org-roam-v2-ack t)

  :custom
  (org-roam-directory "~/Dev/Todo")
  (org-roam-complete-everywhere t)

  :config
  (org-roam-setup))
#+end_src

** Org mode
#+begin_src emacs-lisp
(use-package org
  :ensure t
  :hook
  ((org-mode . center-org-buffers)
   (org-mode . (lambda () (display-line-numbers-mode -1))))

  :config
  (build-hooks 'org-mode-hook 'org-export-dispatch 'org-edit-src-code nil)
  (setq org-support-shift-select t)
  (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t)))
  (define-key org-mode-map (kbd "C-c p") #'org-latex-preview)
  (define-key org-mode-map (kbd "C-c l") #'select-current-line)
  (global-org-modern-mode))

(use-package org-tempo
  :ensure t
  :config
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("bash" . "src bash"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
  (add-to-list 'org-structure-template-alist '("java" . "src java"))
  (add-to-list 'org-structure-template-alist '("hs" . "src haskell"))
  (add-to-list 'org-structure-template-alist '("erl" . "src erlang"))
  (add-to-list 'org-structure-template-alist '("clang" . "src c"))
  (add-to-list 'org-structure-template-alist '("asm" . "src asm")))

(require 'color)
(set-face-attribute 'org-block nil :background
                      (color-darken-name
                       (face-attribute 'default :background) 5))
#+end_src

** Json
#+begin_src emacs-lisp
(use-package json-mode
  :ensure t
  :init
  (setq js-indent-level 2)
  (build-hooks 'json-mode-hook nil nil 'json-pretty-print-buffer))
#+end_src

** Rust
#+begin_src emacs-lisp
(use-package rust-mode
  :mode ("\\.rs\\'")
  :hook ((rust-mode . lsp-deferred)
         (rust-mode . ligature-mode))
  :init
  (build-hooks 'rust-mode-hook 'cargo-mode-build 'rust-run 'rust-format-buffer))
#+end_src

** C/C++
#+begin_src emacs-lisp
; C/C++ mode, auto-loads lsp and lsp-ui given the file extensions
(defun custom-c++-mode-hook ()
  (setq c++-tab-always-indent t)
  (setq c-basic-offset 4)
  (setq c-indent-level 4)
  (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
  (setq tab-width 4)
  (setq indent-tabs-mode nil))

(use-package c-mode
  :mode ("\\.cpp\\'"
         "\\.hpp\\'"
         "\\.c\\'"
         "\\.h\\'")
  :hook ((c-mode . lsp-deferred)
         (c-mode . custom-c++-mode-hook)
         (c-mode . ligature-mode))
  :init
  (build-hooks 'c-mode-hook 'compile nil 'clang-format-buffer))
#+end_src

** Dap
#+begin_src emacs-lisp
(use-package dap-mode
  :ensure t
  :config
  (require 'dap-gdb-lldb)
  (dap-gdb-lldb-setup)
  (define-key dap-mode-map (kbd "C-c d") 'dap-hydra))
#+end_src

** TODO CMake
#+begin_src emacs-lisp

#+end_src
** TODO Platformio (embedded development)
#+begin_src emacs-lisp

#+end_src


** Python
#+begin_src emacs-lisp
(use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode 1))

(use-package lsp-mode
  :commands lsp
  :ensure t
  :diminish lsp-mode
  :hook
  (python-mode . lsp)
  :init)
#+end_src
