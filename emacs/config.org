#+title: Config
#+author: Noak Palander
#+email: noak.palander@protonmail.com
#+property: header-args :tangle "config.el"
#+startup: showeverything

** TODO:
- Read-only mode shortcut
- Window/frame splitting
- Tabs customization

* Custom configuration for doom emacs

** Packages
#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/") t)
(package-initialize)

; Packages this configuration uses
(setq package-selected-packages '(uwu-theme
                                  visual-fill-column
                                  org-modern
                                  dashboard
                                  flycheck
                                  company
                                  helm-xref
                                  irony
                                  lsp-treemacs
                                  treemacs-all-the-icons
                                  helm-lsp
                                  python-mode
                                  cmake-project
                                  elixir-mode mix
                                  move-text))

; If these packages aren't loaded, install them
(when (cl-find-if-not #'package-installed-p package-selected-packages)
  (package-refresh-contents)
  (mapc #'package-install package-selected-packages))
#+end_src

** Dashboard
#+begin_src emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
(use-package dashboard
  :ensure t
  :init

  (setq dashboard-banner-logo-title "Welcome back to Emacs"
        dashboard-footer-messages '("alias vim = \'emacs\'")
        dashboard-set-heading-icons t
        dashboard-set-file-icons t
        dashboard-footer-icon (all-the-icons-octicon "dashboard"
                                                   :height 1.1
                                                   :v-adjust -0.05
                                                   :face 'font-lock-keyword-face)
        dashboard-items '((bookmarks . 5) (projects . 5))
        dashboard-center-content t
        dashboard-startup-banner "~/.emacs.d/icons/logo.png"
        dashboard-page-separator "\n\f\n"
        dashboard-set-navigator t
        dashboard-navigator-buttons `(((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
                                        "Github" "Browse github" (lambda (&rest _) (browse-url "github.com/NoakPalander")))

                                       (,(all-the-icons-octicon "gear" :height 1.1 :v-adjust 0.0) "Dotfiles" "Browse dotfiles"
                                        (lambda (&rest _) (browse-url "github.com/NoakPalander/dotfiles")))

                                       (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0) "Doom" "Doom emacs"
                                        (lambda (&rest _) (browse-url "https://github.com/doomemacs/doomemacs"))))))

  :config
  (dashboard-setup-startup-hook)
  (page-break-lines-mode))
#+end_src

** Miscellaneous
Some helper functions used
#+begin_src emacs-lisp
; Generates hooks for compiling running and formatting source code
(defmacro build-hooks (mode compile-target run-target format-target)
  `(list (add-hook ,mode (lambda () (local-set-key (kbd "C-c b") ,compile-target)))
    (add-hook ,mode (lambda () (local-set-key (kbd "C-c r") ,run-target)))
    (add-hook ,mode (lambda () (local-set-key (kbd "C-c g") ,format-target)))))

; Center org buffers
(defun center-org-buffers ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(defun code-block-color ()
  (set-face-attribute 'org-block nil :background
                      (color-darken-name
                       (face-attribute 'default :background) 3)))

; Creates a new temp file
(defun generate-buffer ()
  (interactive)
  (switch-to-buffer (make-temp-name "scratch")))

; Saves a file by sudo
(defun sudo-save ()
  (interactive)
  (if (not buffer-file-name)
      (write-file (concat "/sudo:root@localhost:" (ido-read-file-name "File:")))
    (write-file (concat "/su
do:root@localhost:" buffer-file-name))))

; Marks the current line
(defun select-current-line ()
    "Select the current line"
  (interactive)
  (end-of-line)
  (set-mark (line-beginning-position)))
#+end_src

Font & Theme
#+begin_src emacs-lisp
(set-frame-font "JetBrains Mono")
(load-theme 'uwu)
#+end_src

Projectile
#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config
  (setq projectile-track-known-projects-automatically nil))
#+end_src

Tabbing
#+begin_src emacs-lisp
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
#+end_src

Transparency
#+begin_src emacs-lisp
(set-frame-parameter (selected-frame) 'alpha 92)
(add-to-list 'default-frame-alist `(alpha . ,92))
#+end_src

** Treemacs
#+begin_src emacs-lisp
(use-package treemacs-all-the-icons
  :after treemacs)
#+end_src

** Company mode / LSP mode
#+begin_src emacs-lisp
(use-package company
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :custom
  (company-minimum-prefix-length 1)
  (company-idle-delay 0.0))


(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      company-idle-delay 0.0
      company-minimum-prefix-length 1
      lsp-idle-delay 0.1)  ;; clangd is fast

(with-eval-after-load 'lsp-mode
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
  (require 'dap-cpptools))
#+end_src

* Keybindings
** Remove previous evil-keybinds
#+begin_src emacs-lisp
(define-key evil-insert-state-map (kbd "C-w") nil)
(define-key evil-replace-state-map (kbd "C-w") nil)
(define-key evil-motion-state-map (kbd "C-y") nil)
(define-key evil-normal-state-map (kbd "C-p") nil)
#+end_src

** Custom global keybindings
#+begin_src emacs-lisp
;(global-set-key (kbd "C-x r") ')
(global-set-key (kbd "C-c n") 'generate-buffer)         ; new buffer
(global-set-key (kbd "C-w") 'clipboard-kill-region)     ; cut
(global-set-key (kbd "C-c x") 'clipboard-yank)          ; paste
(global-set-key (kbd "C-c t") 'treemacs)                ; start treemacs
(global-set-key (kbd "C-c l") 'select-current-line)     ; Selects the current line
(global-set-key (kbd "C-c a") 'read-only-mode)          ; Toggles read-only-mode
#+end_src

** Frame tabs
#+begin_src emacs-lisp
(global-set-key (kbd "M-s M-f") 'tab-bar-new-tab)                       ; Creates a new tab
(global-set-key (kbd "M-s M-d") 'tab-bar-close-tab)                     ; Closes the tab
(global-set-key (kbd "M-s M-r") 'tab-bar-rename-tab)                    ; Renames the tab
(global-set-key (kbd "M-s M-<right>") 'tab-bar-switch-to-next-tab)      ; ->
(global-set-key (kbd "M-s M-<left>") 'tab-bar-switch-to-prev-tab)       ; <-
#+end_src

* Language configurations
** Elixir
Elixir MIX run helper
#+begin_src emacs-lisp
(defun mix-run (&optional prefix use-umbrella-subprojects)
  "Run the mix escript.build command.
If PREFIX is non-nil, prompt for additional params.  See `mix--prompt`
IF USE-UMBRELLA-SUBPROJECTS is t, prompt for umbrells subproject."
  (interactive "P")
  (let ((project-root (if use-umbrella-subprojects (mix--umbrella-subproject-prompt) (mix--project-root))))
    (mix--start nil "App" project-root prefix)))
#+end_src

LSP mode for elixir using elixir-ls and sets some compile/run keyhooks
#+begin_src emacs-lisp
(use-package lsp-mode
  :commands lsp
  :ensure t
  :diminish lsp-mode
  :hook
  ((elixir-mode . lsp)
   (elixir-mode . (lambda () (setenv "LC_ALL" "en_US.UTF-8"))))

  :init
  (add-to-list 'exec-path "/usr/lib/elixir-ls/")
  (build-hooks 'elixir-mode-hook 'mix-compile 'mix-run 'elixir-format)

  :config
  (setq lsp-elixir-suggest-specs nil))
#+end_src

** Org mode
#+begin_src emacs-lisp
(use-package org
  :ensure t
  :hook
  ((org-mode . center-org-buffers)
   (org-mode . (lambda () (display-line-numbers-mode -1)))))

  :config
  (build-hooks 'org-mode-hook 'org-export-dispatch 'org-edit-src-code nil)
  (setq org-support-shift-select t)
  (org-babel-do-load-languages 'org-babel-load-languages '((emacs-lisp . t)))
  (global-org-modern-mode))

(require 'org-tempo)
(add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

(require 'color)
(set-face-attribute 'org-block nil :background
                      (color-darken-name
                       (face-attribute 'default :background) 5))
#+end_src

** C/C++
*** Todo on this, fix use-package and lsp mode
#+begin_src emacs-lisp
(defun custom-c++-mode-hook ()
  (setq c++-tab-always-indent t)
  (setq c-basic-offset 4)
  (setq c-indent-level 4)
  (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
  (setq tab-width 4)
  (setq indent-tabs-mode t))

(which-key-mode)
(add-hook 'c-mode-common-hook 'custom-c++-mode-hook)
(add-hook 'c++-mode-hook 'treemacs)

; C-hook
(defun my-c-mode-common-hook ()
  ;; my customizations for all of c-mode, c++-mode, objc-mode, java-mode
  (c-set-offset 'substatement-open 0)
  ;; other customizations can go here

  (setq c++-tab-always-indent t)
  (setq c-basic-offset 4)                  ;; Default is 2
  (setq c-indent-level 4)                  ;; Default is 2

  (setq tab-stop-list '(4 8 12 16 20 24 28 32 36 40 44 48 52 56 60))
  (setq tab-width 4)
  (setq indent-tabs-mode t))  ; use spaces only if nil

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
#+end_src

** Python
#+begin_src emacs-lisp
(use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode 1))

(use-package lsp-mode
  :commands lsp
  :ensure t
  :diminish lsp-mode
  :hook
  (python-mode . lsp)
  :init)
#+end_src
